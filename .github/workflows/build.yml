name: Build SpotifyPlaylistUpdater

on:
  release:
    types: [ published ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-latest, ubuntu-latest ]
        include:
          - os: windows-latest
            output_name: SpotifyPlaylistUpdater.exe
            asset_name: SpotifyPlaylistUpdater-Windows.exe
          - os: macos-latest
            output_name: SpotifyPlaylistUpdater
            asset_name: SpotifyPlaylistUpdater-macOS
          - os: ubuntu-latest
            output_name: SpotifyPlaylistUpdater
            asset_name: SpotifyPlaylistUpdater-Linux

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          pip install pillow  # Add Pillow for icon conversion

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1 libegl1 libxrandr2 libxss1 libxcursor1 libxcomposite1 libxi6 libxtst6 libxkbcommon-x11-0 \
            libxcb-render-util0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 \
            libxcb-shape0 libxcb-cursor0 libxcb-xinerama0 libxcb-xkb1

      - name: Prepare Windows DLLs
        if: matrix.os == 'windows-latest'
        run: |
          pip install delvewheel
          mkdir -p windows_dlls
          $systemRoot = $env:SystemRoot
          Copy-Item "$systemRoot\System32\api-ms-win-core-path-l1-1-0.dll" -Destination windows_dlls -ErrorAction SilentlyContinue
          Copy-Item "$systemRoot\System32\api-ms-win-core-winrt-l1-1-0.dll" -Destination windows_dlls -ErrorAction SilentlyContinue
          Copy-Item "$systemRoot\System32\api-ms-win-shcore-scaling-l1-1-1.dll" -Destination windows_dlls -ErrorAction SilentlyContinue
          Copy-Item "$systemRoot\System32\api-ms-win-core-winrt-string-l1-1-0.dll" -Destination windows_dlls -ErrorAction SilentlyContinue
          Get-ChildItem windows_dlls

      - name: Build with PyInstaller (Windows/Linux)
        if: matrix.os != 'macos-latest'
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Create a modified spec file for Windows to include the missing DLLs
            cp spotifyplaylistupdater.spec spotifyplaylistupdater_win.spec
            # Add the DLLs to the binaries section in the spec file
            python -c "
            with open('spotifyplaylistupdater_win.spec', 'r') as file:
                content = file.read()
          
            # Add windows_dlls to binaries
            content = content.replace('binaries=[]', 'binaries=[(\"windows_dlls/api-ms-win-core-path-l1-1-0.dll\", \".\"), (\"windows_dlls/api-ms-win-core-winrt-l1-1-0.dll\", \".\"), (\"windows_dlls/api-ms-win-shcore-scaling-l1-1-1.dll\", \".\"), (\"windows_dlls/api-ms-win-core-winrt-string-l1-1-0.dll\", \".\")] if os.path.exists(\"windows_dlls\") and os.listdir(\"windows_dlls\") else []')
          
            with open('spotifyplaylistupdater_win.spec', 'w') as file:
                file.write(content)
            "
            pyinstaller spotifyplaylistupdater_win.spec
          else
            pyinstaller spotifyplaylistupdater.spec
          fi

      - name: Create macOS spec file
        if: matrix.os == 'macos-latest'
        run: |
          cat > spotifyplaylistupdater_mac.spec << 'EOF'
          # -*- mode: python ; coding: utf-8 -*-
          block_cipher = None

          a = Analysis(
              ['main_app.py'],
              pathex=[],
              binaries=[],
              hiddenimports=['PySide6.QtCore', 'PySide6.QtGui', 'PySide6.QtWidgets'],
              hookspath=[],
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              [],
              exclude_binaries=True,
              name='SpotifyPlaylistUpdater',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              console=False,
              icon='src/assets/icon.ico',
          )

          coll = COLLECT(
              exe,
              a.binaries,
              a.zipfiles,
              a.datas,
              strip=False,
              upx=True,
              upx_exclude=[],
              name='SpotifyPlaylistUpdater',
          )

          app = BUNDLE(
              coll,
              name='SpotifyPlaylistUpdater.app',
              icon='src/assets/icon.ico',
              bundle_identifier='com.spotifyplaylistupdater',
              info_plist={
                  'NSHighResolutionCapable': True,
                  'NSPrincipalClass': 'NSApplication',
                  'CFBundleShortVersionString': '1.0.0',
              },
          )
          EOF

      - name: Build with PyInstaller (macOS)
        if: matrix.os == 'macos-latest'
        run: pyinstaller spotifyplaylistupdater_mac.spec

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/SpotifyPlaylistUpdater.exe

      - name: Upload Linux artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/SpotifyPlaylistUpdater

      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/SpotifyPlaylistUpdater.app

      - name: Create DMG for macOS
        if: matrix.os == 'macos-latest'
        run: |
          # Install create-dmg
          brew install create-dmg
          
          # Create DMG from the app bundle
          create-dmg \
            --volname "SpotifyPlaylistUpdater" \
            --volicon "src/assets/icon.ico" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "SpotifyPlaylistUpdater.app" 200 190 \
            --hide-extension "SpotifyPlaylistUpdater.app" \
            --app-drop-link 600 185 \
            "dist/SpotifyPlaylistUpdater.dmg" \
            "dist/SpotifyPlaylistUpdater.app"

      - name: Attach artifacts to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ matrix.os == 'windows-latest' && 'dist/SpotifyPlaylistUpdater.exe' || matrix.os == 'ubuntu-latest' && 'dist/SpotifyPlaylistUpdater' || 'dist/SpotifyPlaylistUpdater.dmg' }}
          token: ${{ secrets.GITHUB_TOKEN }}
